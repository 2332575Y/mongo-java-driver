/*
 * Copyright (c) 2008 - 2013 10gen, Inc. <http://10gen.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def configDir = new File(rootDir, 'config')

//////////////////////////////////////////
// Common behavior                      //
//////////////////////////////////////////

configure(subprojects.findAll {it.name != 'util'}) {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'findbugs'
    apply plugin: 'osgi'
    apply plugin: 'jacoco'

    evaluationDependsOn(':util')

    group = 'org.mongodb'
    version = '3.0.0-SNAPSHOT'
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.11'
        testCompile project(':util') //Adding categories to classpath
    }

    sourceSets {
        main { java.srcDirs = ['src/main'] }
        test { java.srcDirs = ['src/test'] }
    }

    /* Compiling */
    tasks.withType(Compile) {
        options.encoding = 'ISO-8859-1'
        options.fork = true
        options.debug = true
        options.compilerArgs = ['-Xlint:all', '-Xlint:-options']

        onlyIf { JavaVersion.current().isJava7Compatible() }
    }

    /* Testing */
    tasks.withType(Test) {
        maxParallelForks = 1
        systemProperties(
                'org.mongodb.test.uri': System.getProperty('org.mongodb.test.uri', null),
                'org.mongodb.useSocket': System.getProperty('org.mongodb.useSocket', "false"),
                'org.mongodb.disableAsync': System.getProperty('org.mongodb.disableAsync', "false")
        )

        if (project.hasProperty('ssl.enabled') && project.property('ssl.enabled').toBoolean()) {
            systemProperties(
                    'javax.net.ssl.keyStoreType': project.property('ssl.keyStoreType'),
                    'javax.net.ssl.keyStore': project.property('ssl.keyStore'),
                    'javax.net.ssl.keyStorePassword': project.property('ssl.keyStorePassword'),
                    'javax.net.ssl.trustStoreType': project.property('ssl.trustStoreType'),
                    'javax.net.ssl.trustStore': project.property('ssl.trustStore'),
                    'javax.net.ssl.trustStorePassword': project.property('ssl.trustStorePassword')
            )
        }

        useJUnit() {
            if (!JavaVersion.current().isJava7Compatible()
                    || (project.hasProperty('ssl.enabled') && project.property('ssl.enabled').toBoolean())) {
                excludeCategories 'category.Async'
            }
            if (!(project.hasProperty('rs.enabled') && project.property('rs.enabled').toBoolean())) {
                excludeCategories 'category.ReplicaSet'
            }
        }

        jacoco { enabled = false }

        beforeTest { descr ->
            logger.info("[Test ${descr.className} > ${descr.name}]")
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask('check')) {
            tasks.withType(Test) { jacoco { enabled = true } }
        }
    }

    task testAll(dependsOn: tasks.withType(Test))
    check.dependsOn testAll

    /* Code quality */
    checkstyle {
        configFile = new File("$configDir/checkstyle.xml")
    }

    findbugs {
        ignoreFailures = true
        excludeFilter = new File("$configDir/findbugs-exclude.xml")
    }

    tasks.matching { (it instanceof FindBugs) || (it instanceof Pmd) }.all {
        reports {
            xml.enabled = project.hasProperty('xmlReportsEnabled')
            html.enabled = !project.hasProperty('xmlReportsEnabled')
        }
    }

    /* Artifacts */
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc
    }

    javadoc {
        dependsOn project(':util').compileJava //We need taglets to be compiled
        options.author = true
        options.version = true
        options.links 'http://docs.oracle.com/javase/7/docs/api/'
        options.tagletPath project(':util').sourceSets.main.output.classesDir
        options.taglets 'ManualTaglet'
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

//////////////////////////////////////////
// Project specific behavior            //
//////////////////////////////////////////

project(':bson') {

    jar {
        manifest {
            attributes(
                    'Bundle-License': 'http://www.apache.org/licenses/LICENSE-2.0.txt',
                    'Bundle-Name': 'BSON'
            )
        }
    }
}

project(':driver') {

    sourceSets {
        test        { java.srcDirs = ['src/test/unit'] }
        acceptance  { java.srcDirs = ['src/test/acceptance'] }
        functional  { java.srcDirs = ['src/test/functional'] }
    }

    dependencies {
        compile             project(':bson')
        testCompile         'org.jmock:jmock-legacy:2.6.0'
        testCompile         'org.jmock:jmock-junit4:2.6.0'
        functionalCompile   sourceSets.test.runtimeClasspath
        acceptanceCompile   sourceSets.functional.runtimeClasspath
    }

    jar {
        from project(':bson').sourceSets.main.output
        manifest {
            attributes(
                    'Bundle-License': 'http://www.apache.org/licenses/LICENSE-2.0.txt',
                    'Bundle-Name': 'MongoDB Java Driver',
                    'Bundle-SymbolicName': 'org.mongodb.driver',
                    'Import-Package': 'javax.management, javax.net, javax.net.ssl',

            )
        }
    }

    task functionalTest(type: Test, dependsOn: test) {
        testClassesDir = sourceSets.functional.output.classesDir
        classpath = sourceSets.functional.runtimeClasspath
    }

    task acceptanceTest(type: Test, dependsOn: functionalTest) {
        testClassesDir = sourceSets.acceptance.output.classesDir
        classpath = sourceSets.acceptance.runtimeClasspath
    }

    sourcesJar {
        from project(':bson').sourceSets.main.allSource
    }

    javadoc {
        source project(':bson').sourceSets.main.allJava
    }
}

project(':driver-compat') {
    apply plugin: 'clirr'

    dependencies {
        compile project(':driver')
        testCompile project(':driver').sourceSets.test.output
        testCompile 'org.jmock:jmock-legacy:2.6.0'
        testCompile 'org.jmock:jmock-junit4:2.6.0'
    }

    clirr {
        formats = ['xml', 'html']
        baseline 'org.mongodb:mongo-java-driver:2.11.0'
        failOnBinError = false
        failOnSrcError = false
    }

    jar {
        from project(':bson').sourceSets.main.output
        from project(':driver').sourceSets.main.output
        manifest {
            attributes(
                    'Bundle-License': 'http://www.apache.org/licenses/LICENSE-2.0.txt',
                    'Bundle-Name': 'MongoDB Java Driver',
                    'Bundle-SymbolicName': 'org.mongodb.mongo-java-driver',
                    'Import-Package': 'javax.management, javax.net, javax.net.ssl'
            )
        }
    }

    sourcesJar {
        from project(':bson').sourceSets.main.allSource
        from project(':driver').sourceSets.main.allSource
    }

    javadoc {
        source project(':bson').sourceSets.main.allJava
        source project(':driver').sourceSets.main.allJava
    }

    checkstyle {
        configFile = new File("$configDir/checkstyle-lite.xml")
    }

    pmd {
        //cut down version of PMD for the older code base
        ruleSets = ["braces"]
        ignoreFailures = false
    }
}

//////////////////////////////////////////
// Root project configuration           //
//////////////////////////////////////////
task wrapper(type: Wrapper) {
    gradleVersion = "1.6"
}

gradle.buildFinished { BuildResult result ->
    if (result.failure && !JavaVersion.current().isJava7Compatible())
        gradle.rootProject.logger.error("\n* Warning:\nJDK ${JavaVersion.VERSION_1_7} is minimal requirement for building the driver. You have ${JavaVersion.current()}.")
}

apply from: 'gradle/ide-configuration.gradle'
apply from: 'gradle/maven-configuration.gradle'
