/*
 * Copyright (c) 2008 - 2012 10gen, Inc. <http://10gen.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def configDir = new File(rootDir, 'config')

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:1.1.0'
    }
}

//////////////////////////////////////////
// Common behavior                      //
//////////////////////////////////////////

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'findbugs'
    apply plugin: 'osgi'
    apply plugin: 'cobertura'


    group = 'org.mongodb'
    version = '3.0.0-SNAPSHOT'
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.11'
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main'
            }
        }
        test {
            java {
                srcDir 'src/test'
            }
        }
    }

    checkstyle {
        configFile = new File("$configDir/checkstyle.xml")
    }

    findbugs {
        ignoreFailures = true
    }

    pmd {
        ignoreFailures = true
    }

    cobertura {
        coverageFormats = ['xml', 'html']
    }

    tasks.withType(Compile) {
        options.encoding = 'ISO-8859-1'
        options.fork = true
        options.debug = true
        options.compilerArgs = ['-Xlint:all']

        onlyIf { JavaVersion.current().isJava7Compatible() }
    }

    tasks.withType(Test) {
        systemProperty 'org.mongodb.test.uri', System.getProperty('org.mongodb.test.uri', null)
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc
    }

    task testsJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    javadoc {
        options.author = true
        options.version = true
        options.links 'http://download.oracle.com/javase/1.5.0/docs/api/'
        options.tagletPath file("$rootDir/buildSrc/build/classes/main")
        options.taglets 'DochubTaglet', 'ManualTaglet'
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

//TODO: figure out why this doesn't work
configure(subprojects.findAll { it.name in ['bson', 'driver', 'driver-compat'] }) {
    tasks.withType(Test) {
        maxParallelForks = 16
    }
}

configure(subprojects.findAll { it.name in ['bson', 'driver', 'driver-compat', 'morphia'] }) {
    apply plugin: 'maven'
    apply plugin: 'signing'

    project.ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    signing {
        required { project.isReleaseVersion && gradle.taskGraph.hasTask("deploy") }
        sign configurations.archives
    }

    install {
        project.ext.installer = repositories.mavenInstaller
    }

    uploadArchives {
        project.ext.deployer = repositories.mavenDeployer {
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots')
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
                    authentication(
                            userName: project.property('sonatypeUsername'),
                            password: project.property('sonatypePassword')
                    )
                }
            }
        }
    }

    [project.installer, project.deployer]*.pom {

        project {
            scm {
                url 'https://github.com/mongodb/mongo-java-driver'
                connection 'scm:git:git://github.com/mongodb/mongo-java-driver'
            }

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    name 'Various'
                    organization '10gen'
                }
            }
        }

        whenConfigured { pom ->
            pom.dependencies.removeAll { dep -> dep.scope != 'compile' }
            pom.dependencies*.scope = null
        }
    }
}

configure(subprojects.findAll { it.name in ['driver-compat', 'morphia'] }) {
    checkstyle {
        configFile = new File("$configDir/checkstyle-lite.xml")
        ignoreFailures = true
    }

    idea.module.iml {
        withXml { provider ->

            def node = provider.node.component.find { it.@name == 'CheckStyle-IDEA-Module' }
            if (node == null) {
                node = provider.node.appendNode('component')
            }
            node.replaceNode {
                component(name:'CheckStyle-IDEA-Module') {
                    option(name:'configuration'){
                        map {
                            entry(key: 'active-configuration', value: 'FILE:$PROJECT_DIR$/config/checkstyle-lite.xml:Lite')
                        }
                    }
                }
            }

        }
    }

}

//////////////////////////////////////////
// Project specific behavior            //
//////////////////////////////////////////

project(':common') {

}

project(':bson') {

    dependencies {
        compile project(':common')
    }

    jar {
        manifest {
            attributes(
                    'Bundle-License': 'http://www.apache.org/licenses/LICENSE-2.0.txt',
                    'Bundle-Name': 'BSON'
            )
        }
    }

    [project.installer, project.deployer]*.pom {
        project {
            name 'BSON'
            description 'The BSON libs'
            url 'http://bsonspec.org/'
        }

        whenConfigured { pom ->
            pom.dependencies.removeAll { true }
        }
    }
}

project(':driver') {

    sourceSets {
        async {
            java {
                srcDir 'src/test/async'
            }
        }
        acceptance {
            java {
                srcDir 'src/test/acceptance'
            }
        }
        functional {
            java {
                srcDir 'src/test/functional'
            }
        }
        unit {
            java {
                srcDir 'src/test/unit'
            }
        }
    }

    dependencies {
        compile project(':common')
        compile project(':bson')
        unitCompile 'junit:junit:4.11'
        unitCompile sourceSets.main.runtimeClasspath
        functionalCompile 'junit:junit:4.11'
        functionalCompile sourceSets.main.runtimeClasspath
        functionalCompile sourceSets.unit.runtimeClasspath
        acceptanceCompile 'junit:junit:4.11'
        acceptanceCompile sourceSets.main.runtimeClasspath
        acceptanceCompile sourceSets.functional.runtimeClasspath
        asyncCompile 'junit:junit:4.11'
        asyncCompile sourceSets.main.runtimeClasspath
        asyncCompile sourceSets.functional.runtimeClasspath
    }

    idea.module {
        testSourceDirs += project.sourceSets.unit.allSource.getSrcDirs()
        testSourceDirs += project.sourceSets.functional.allSource.getSrcDirs()
        testSourceDirs += project.sourceSets.acceptance.allSource.getSrcDirs()
        testSourceDirs += project.sourceSets.async.allSource.getSrcDirs()
    }

    jar {
        from project(':common').sourceSets.main.output
        from project(':bson').sourceSets.main.output
        manifest {
            attributes(
                    'Bundle-License': 'http://www.apache.org/licenses/LICENSE-2.0.txt',
                    'Bundle-Name': 'MongoDB Java Driver',
                    'Bundle-SymbolicName': 'org.mongodb.driver',
                    'Import-Package': 'javax.management, javax.net, javax.net.ssl',

            )
        }
    }

    task unitTest(type: Test) {
        testClassesDir = sourceSets.unit.output.classesDir
        classpath = sourceSets.unit.runtimeClasspath
    }

    task functionalTest(type: Test, dependsOn: unitTest) {
        testClassesDir = sourceSets.functional.output.classesDir
        classpath = sourceSets.functional.runtimeClasspath
    }

    task acceptanceTest(type: Test, dependsOn: functionalTest) {
        testClassesDir = sourceSets.acceptance.output.classesDir
        classpath = sourceSets.acceptance.runtimeClasspath
    }

    task asyncTest(type: Test, dependsOn: functionalTest) {
        onlyIf { JavaVersion.current().isJava7Compatible() }
        testClassesDir = sourceSets.async.output.classesDir
        classpath = sourceSets.async.runtimeClasspath
    }

    sourcesJar {
        from project(':common').sourceSets.main.allSource
        from project(':bson').sourceSets.main.allSource
    }

    javadoc {
        source project(':common').sourceSets.main.allJava
        source project(':bson').sourceSets.main.allJava
    }

    [project.installer, project.deployer]*.pom {
        project {
            name 'MongoDB Java Driver'
            description 'The MongoDB Java Driver'
            url 'http://www.mongodb.org'
        }

        whenConfigured { pom ->
            pom.dependencies.removeAll { true }
        }
    }
}

project(':driver-compat') {
    apply plugin: 'clirr'

    dependencies {
        compile project(':driver')
    }

    clirr {
        formats = ['plain']
        baseline 'org.mongodb:mongo-java-driver:2.10.1'
        failOnBinError = false
        failOnSrcError = false
    }

    jar {
        from project(':common').sourceSets.main.output
        from project(':bson').sourceSets.main.output
        from project(':driver').sourceSets.main.output
        manifest {
            attributes(
                    'Bundle-License': 'http://www.apache.org/licenses/LICENSE-2.0.txt',
                    'Bundle-Name': 'MongoDB Java Driver',
                    'Bundle-SymbolicName': 'org.mongodb.mongo-java-driver',
                    'Import-Package': 'javax.management, javax.net, javax.net.ssl'
            )
        }
    }

    sourcesJar {
        from project(':common').sourceSets.main.allSource
        from project(':bson').sourceSets.main.allSource
        from project(':driver').sourceSets.main.allSource
    }

    javadoc {
        source project(':common').sourceSets.main.allJava
        source project(':bson').sourceSets.main.allJava
        source project(':driver').sourceSets.main.allJava
    }

    [project.installer, project.deployer]*.pom {
        project {
            name 'MongoDB Java Driver'
            description 'The MongoDB Java Driver'
            url 'http://www.mongodb.org'
        }

        whenConfigured { pom ->
            pom.dependencies.removeAll { true }
        }
    }
}

project(':morphia') {
    dependencies {
        compile 'com.thoughtworks.proxytoys:proxytoys:1.0'
        compile project(':driver-compat')
    }

    [project.installer, project.deployer]*.pom {
        project {
            name 'morphia'
            description 'A lightweight library for mapping Java objects to/from MongoDB (see mongodb.org).'
            url 'http://code.google.com/p/morphia/'

            scm {
                url 'http://code.google.com/p/morphia/source/browse'
                connection 'http://morphia.googlecode.com/svn/trunk/'
            }

            developers {
                developer {
                    id 'oli.gauti'
                    name 'Olafur Gauti Gudmundsson'
                }
            }
        }
    }
}

//////////////////////////////////////////
// Root project configuration           //
//////////////////////////////////////////

idea {
    project {
        languageLevel = '1.6'
        ipr {
            withXml { provider ->
                def mapping = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping
                mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'

                def node = provider.node.component.find { it.@name == 'CheckStyle-IDEA-Module' }
                if (node == null) {
                    node = provider.node.appendNode('component')
                }
                node.replaceNode {
                    component(name:'CheckStyle-IDEA') {
                        option(name:'configuration'){
                            map {
                                entry(key: 'active-configuration', value: 'FILE:$PROJECT_DIR$/config/checkstyle.xml:Default')
                                entry(key: 'check-test-classes', value: true)
                                entry(key: 'check-nonjava-files', value: false)
                                entry(key: 'location-0', value: 'FILE:$PROJECT_DIR$/config/checkstyle.xml:Default')
                                entry(key: 'location-1', value: 'FILE:$PROJECT_DIR$/config/checkstyle-lite.xml:Lite')
                            }
                        }
                    }
                }
            }
            beforeMerged { project ->
                project.modulePaths.clear()
            }
        }
    }
}
